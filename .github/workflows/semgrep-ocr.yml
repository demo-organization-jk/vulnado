on:
  workflow_dispatch:
  pull_request: {}
  push:
    branches:
    - master
    paths:
    - .github/workflows/semgrep.yml
name: Semgrep-OCR
jobs:
  ExtractTextFromImages:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4
      # Add this to disable X11-based ImageMagick commands
      - name: Disable X11 for ImageMagick
        run: |
          export DISPLAY=:0      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'  # Specify Python version
      - name: Install Py Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3
          pip list
      - name: Run Textract Script
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
            import boto3
            import os
            import zipfile
            
            # Initialize AWS Textract client
            client = boto3.client('textract')
            
            def extract_text_from_image(image_file):
                """
                Extracts text from the given image using AWS Textract.
                """
                with open(image_file, 'rb') as img:
                    img_bytes = img.read()
            
                # Call AWS Textract
                response = client.detect_document_text(Document={'Bytes': img_bytes})
                
                # Extract the text
                detected_text = ""
                for block in response['Blocks']:
                    if block['BlockType'] == 'LINE':
                        detected_text += block['Text'] + "\n"
            
                return detected_text
            
            def process_images_in_folder(root_folder):
                """
                Finds all image files in the given folder (and subfolders),
                extracts text using AWS Textract, and writes the output to text files.
                """
                print("Entered process_images_in_folder")
                image_extensions = ['.png', '.jpg', '.jpeg', '.tiff', '.bmp']  # Supported image types
                text_files = []
            
                for foldername, subfolders, filenames in os.walk(root_folder):
                    for filename in filenames:
                        ext = os.path.splitext(filename)[1].lower()
                        if ext in image_extensions:
                            image_path = os.path.join(foldername, filename)
                            print(f"Processing: {image_path}")
                            
                            # Extract text from image
                            extracted_text = extract_text_from_image(image_path)
            
                            # Create a corresponding text file
                            txt_filename = f"im2txt-{os.path.splitext(filename)[0]}.txt"
                            txt_filepath = os.path.join(foldername, txt_filename)
                            text_files.append(txt_filepath)
            
                            # Write the extracted text to a file
                            with open(txt_filepath, 'w') as txt_file:
                                txt_file.write(extracted_text)
            
                            print(f"Text written to: {txt_filepath}")
            
                return text_files
            
            def create_zip_of_txt_files(text_files, zip_filename):
                """
                Zips all the text files into a single archive.
                """
                with zipfile.ZipFile(zip_filename, 'w') as zipf:
                    for txt_file in text_files:
                        zipf.write(txt_file, os.path.basename(txt_file))
                        print(f"Added {txt_file} to zip.")
            
            root_folder = 'text_in_images'  # Specify the root folder where images are stored
            zip_filename = 'im2txt_output.zip'
        
            # Process all images in the folder and subfolders
            text_files = process_images_in_folder(root_folder)
        
            # Create a zip of all the generated text files
            create_zip_of_txt_files(text_files, zip_filename)
        
            print(f"All text files zipped into: {zip_filename}")

      - name: Upload Dependency Zip
        uses: actions/upload-artifact@v3
        with:
          name: zipfile
          path: im2txt_output.zip
  semgrep:
    needs: ExtractTextFromImages
    name: Scan
    runs-on: ubuntu-20.04
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      image: semgrep/semgrep
    steps:
      - uses: actions/checkout@v4
      - name: Download artifact from the previous job
        uses: actions/download-artifact@v3
        with:
          name: zipfile
      - name: Semgrep Scan
        run: |
          unzip -o im2txt_output.zip
          semgrep ci
