{"errors": [{"code": 3, "level": "warn", "message": "Syntax error at line mvnw:217:\n `case \"$key\" in (wrapperUrl) jarUrl=\"$value\"; break ;;\n      esac` was unexpected", "path": "mvnw", "spans": [{"end": {"col": 11, "line": 218}, "file": "mvnw", "start": {"col": 7, "line": 217}}], "type": "Syntax error"}], "paths": {"_comment": "<add --verbose for a list of skipped paths>", "scanned": [".gitignore", ".mvn/wrapper/maven-wrapper.jar", ".mvn/wrapper/maven-wrapper.properties", "Dockerfile", "LICENSE", "META-INF/MANIFEST.MF", "META-INF/maven/io.takari/maven-wrapper/pom.properties", "README.md", "client/Dockerfile", "client/css/main.css", "client/images/doggo.jpg", "client/images/signout-hover.png", "client/images/signout.png", "client/images/trash.png", "client/index.html", "client/js/index.js", "client/js/login.js", "client/login.html", "docker-compose.yml", "exercises/01-sql-injection.md", "exercises/02-xss.md", "exercises/03-ssrf.md", "exercises/04-rce-reverse-shell.md", "exercises/assets/arch.png", "exercises/assets/arch.xml", "exercises/assets/reverse_shell.png", "exercises/assets/reverse_shell.xml", "internal_site/Dockerfile", "internal_site/index.html", "maven_dep_tree.txt", "mvnw", "mvnw.cmd", "org/apache/maven/wrapper/BootstrapMainStarter.class", "org/apache/maven/wrapper/DefaultDownloader$SystemPropertiesProxyAuthenticator.class", "org/apache/maven/wrapper/DefaultDownloader.class", "org/apache/maven/wrapper/Downloader.class", "org/apache/maven/wrapper/Installer.class", "org/apache/maven/wrapper/Logger.class", "org/apache/maven/wrapper/MavenWrapperMain.class", "org/apache/maven/wrapper/PathAssembler$LocalDistribution.class", "org/apache/maven/wrapper/PathAssembler.class", "org/apache/maven/wrapper/SystemPropertiesHandler.class", "org/apache/maven/wrapper/WrapperConfiguration.class", "org/apache/maven/wrapper/WrapperExecutor.class", "org/apache/maven/wrapper/cli/AbstractCommandLineConverter.class", "org/apache/maven/wrapper/cli/AbstractPropertiesCommandLineConverter.class", "org/apache/maven/wrapper/cli/CommandLineArgumentException.class", "org/apache/maven/wrapper/cli/CommandLineConverter.class", "org/apache/maven/wrapper/cli/CommandLineOption.class", "org/apache/maven/wrapper/cli/CommandLineParser$AfterFirstSubCommand.class", "org/apache/maven/wrapper/cli/CommandLineParser$AfterOptions.class", "org/apache/maven/wrapper/cli/CommandLineParser$BeforeFirstSubCommand.class", "org/apache/maven/wrapper/cli/CommandLineParser$CaseInsensitiveStringComparator.class", "org/apache/maven/wrapper/cli/CommandLineParser$KnownOptionParserState.class", "org/apache/maven/wrapper/cli/CommandLineParser$MissingOptionArgState.class", "org/apache/maven/wrapper/cli/CommandLineParser$OptionAwareParserState.class", "org/apache/maven/wrapper/cli/CommandLineParser$OptionComparator.class", "org/apache/maven/wrapper/cli/CommandLineParser$OptionParserState.class", "org/apache/maven/wrapper/cli/CommandLineParser$OptionString.class", "org/apache/maven/wrapper/cli/CommandLineParser$OptionStringComparator.class", "org/apache/maven/wrapper/cli/CommandLineParser$ParserState.class", "org/apache/maven/wrapper/cli/CommandLineParser$UnknownOptionParserState.class", "org/apache/maven/wrapper/cli/CommandLineParser.class", "org/apache/maven/wrapper/cli/ParsedCommandLine.class", "org/apache/maven/wrapper/cli/ParsedCommandLineOption.class", "org/apache/maven/wrapper/cli/ProjectPropertiesCommandLineConverter.class", "org/apache/maven/wrapper/cli/SystemPropertiesCommandLineConverter.class", "pom.xml", "reverse_shell/README.md", "reverse_shell/main.tf", "reverse_shell/tf", "reverse_shell/variables.tf", "src/main/java/com/scalesec/vulnado/Comment.java", "src/main/java/com/scalesec/vulnado/CommentsController.java", "src/main/java/com/scalesec/vulnado/CowController.java", "src/main/java/com/scalesec/vulnado/Cowsay.java", "src/main/java/com/scalesec/vulnado/LinkLister.java", "src/main/java/com/scalesec/vulnado/LinksController.java", "src/main/java/com/scalesec/vulnado/LoginController.java", "src/main/java/com/scalesec/vulnado/Postgres.java", "src/main/java/com/scalesec/vulnado/User.java", "src/main/java/com/scalesec/vulnado/VulnadoApplication.java", "src/main/resources/application.properties"]}, "results": [{"check_id": "generic.html-templates.security.var-in-script-tag.var-in-script-tag", "end": {"col": 47, "line": 63, "offset": 2712}, "extra": {"engine_kind": "PRO", "fingerprint": "2a7ee34bd181d14439100630fa76aa57c72375adaff84897d3e2ba8ae5ff0255e7a800358f43744e717c790ceeb2c3faf146608cfdb181f5c085e4ff7ab1a72f_0", "is_ignored": false, "lines": "      <div class=\"row\" data-comment_id=\"{{id}}\">", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "4bUkpl", "url": "https://semgrep.dev/playground/r/3ZTdlj/generic.html-templates.security.var-in-script-tag.var-in-script-tag", "version_id": "3ZTdlj"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/generic.html-templates.security.var-in-script-tag.var-in-script-tag", "shortlink": "https://sg.run/eLWE", "source": "https://semgrep.dev/r/generic.html-templates.security.var-in-script-tag.var-in-script-tag", "subcategory": ["audit"], "technology": ["html-templates"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {}, "severity": "WARNING"}, "path": "client/index.html", "start": {"col": 41, "line": 63, "offset": 2706}}, {"check_id": "generic.html-templates.security.var-in-script-tag.var-in-script-tag", "end": {"col": 35, "line": 67, "offset": 2868}, "extra": {"engine_kind": "PRO", "fingerprint": "2a7ee34bd181d14439100630fa76aa57c72375adaff84897d3e2ba8ae5ff0255e7a800358f43744e717c790ceeb2c3faf146608cfdb181f5c085e4ff7ab1a72f_1", "is_ignored": false, "lines": "              <strong>{{username}}</strong> commented at {{created_on}}", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "4bUkpl", "url": "https://semgrep.dev/playground/r/3ZTdlj/generic.html-templates.security.var-in-script-tag.var-in-script-tag", "version_id": "3ZTdlj"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/generic.html-templates.security.var-in-script-tag.var-in-script-tag", "shortlink": "https://sg.run/eLWE", "source": "https://semgrep.dev/r/generic.html-templates.security.var-in-script-tag.var-in-script-tag", "subcategory": ["audit"], "technology": ["html-templates"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {}, "severity": "WARNING"}, "path": "client/index.html", "start": {"col": 23, "line": 67, "offset": 2856}}, {"check_id": "generic.html-templates.security.var-in-script-tag.var-in-script-tag", "end": {"col": 72, "line": 67, "offset": 2905}, "extra": {"engine_kind": "PRO", "fingerprint": "2a7ee34bd181d14439100630fa76aa57c72375adaff84897d3e2ba8ae5ff0255e7a800358f43744e717c790ceeb2c3faf146608cfdb181f5c085e4ff7ab1a72f_2", "is_ignored": false, "lines": "              <strong>{{username}}</strong> commented at {{created_on}}", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "4bUkpl", "url": "https://semgrep.dev/playground/r/3ZTdlj/generic.html-templates.security.var-in-script-tag.var-in-script-tag", "version_id": "3ZTdlj"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/generic.html-templates.security.var-in-script-tag.var-in-script-tag", "shortlink": "https://sg.run/eLWE", "source": "https://semgrep.dev/r/generic.html-templates.security.var-in-script-tag.var-in-script-tag", "subcategory": ["audit"], "technology": ["html-templates"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {}, "severity": "WARNING"}, "path": "client/index.html", "start": {"col": 58, "line": 67, "offset": 2891}}, {"check_id": "generic.html-templates.security.var-in-script-tag.var-in-script-tag", "end": {"col": 45, "line": 73, "offset": 3129}, "extra": {"engine_kind": "PRO", "fingerprint": "2a7ee34bd181d14439100630fa76aa57c72375adaff84897d3e2ba8ae5ff0255e7a800358f43744e717c790ceeb2c3faf146608cfdb181f5c085e4ff7ab1a72f_3", "is_ignored": false, "lines": "              <p class=\"card-text\">{{{body}}}</p>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "4bUkpl", "url": "https://semgrep.dev/playground/r/3ZTdlj/generic.html-templates.security.var-in-script-tag.var-in-script-tag", "version_id": "3ZTdlj"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/generic.html-templates.security.var-in-script-tag.var-in-script-tag", "shortlink": "https://sg.run/eLWE", "source": "https://semgrep.dev/r/generic.html-templates.security.var-in-script-tag.var-in-script-tag", "subcategory": ["audit"], "technology": ["html-templates"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {}, "severity": "WARNING"}, "path": "client/index.html", "start": {"col": 37, "line": 73, "offset": 3121}}, {"check_id": "generic.secrets.security.detected-jwt-token.detected-jwt-token", "end": {"col": 53, "line": 65, "offset": 3086}, "extra": {"engine_kind": "PRO", "fingerprint": "559e642826a83b1b19f90f5fe370844f66143f4ddc90db8447cfc9324147aaa134c8de659b59bfdb5c4e7a745de9d00b95de7ef4ecd2cdbd9c2d6d378e88346f_0", "is_ignored": false, "lines": "  OPTIONS /eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyaWNrIn0.lLdv2SY2TWzzXVKSahFDWPLcUHwpXpjsLnhwo0ioRFM HTTP/1.1", "message": "JWT token detected", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-321: Use of Hard-coded Cryptographic Key"], "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A02:2021 - Cryptographic Failures"], "references": ["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "kxU8E8", "url": "https://semgrep.dev/playground/r/9lTzk5/generic.secrets.security.detected-jwt-token.detected-jwt-token", "version_id": "9lTzk5"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token", "shortlink": "https://sg.run/05N5", "source": "https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token", "source-rule-url": "https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/jwt.py", "subcategory": ["audit"], "technology": ["secrets", "jwt"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {}, "severity": "ERROR"}, "path": "exercises/02-xss.md", "start": {"col": 12, "line": 65, "offset": 3045}}, {"check_id": "html.security.audit.missing-integrity.missing-integrity", "end": {"col": 72, "line": 57, "offset": 2041}, "extra": {"engine_kind": "PRO", "fingerprint": "4ea243012dfb5aa0e44e1a67e197122ead986e2192f6c3b1226200cba047420e1fbe19e9e3f1334824477d537b53f1398449f7510c21f8f4d4db8f7e8e360f41_0", "is_ignored": false, "lines": "    <script src=\"https://code.jquery.com/jquery-3.2.1.min.js\"></script>", "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-353: Missing Support for Integrity Check"], "dev.semgrep.actions": ["monitor"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A08:2021 - Software and Data Integrity Failures"], "references": ["https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "AbUQzj", "url": "https://semgrep.dev/playground/r/jQTKQe/html.security.audit.missing-integrity.missing-integrity", "version_id": "jQTKQe"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity", "shortlink": "https://sg.run/krXA", "source": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity", "subcategory": ["audit"], "technology": ["html"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {"$...A": {"abstract_content": " src=\"https://code.jquery.com/jquery-3.2.1.min.js\"", "end": {"col": 62, "line": 57, "offset": 2031}, "start": {"col": 12, "line": 57, "offset": 1981}}}, "severity": "WARNING"}, "path": "client/index.html", "start": {"col": 5, "line": 57, "offset": 1974}}, {"check_id": "html.security.audit.missing-integrity.missing-integrity", "end": {"col": 101, "line": 60, "offset": 2556}, "extra": {"engine_kind": "PRO", "fingerprint": "17096b255672fcc9fd1fe19f5bc08fdac8f9d8e95fb7bbd199a0d37f0ec6294fe945c98bfff4d0bd393948206615d7c444bde0ae6421cf88585f24edb7373c72_0", "is_ignored": false, "lines": "    <script src=\"http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars.min-v4.1.0.js\"></script>", "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-353: Missing Support for Integrity Check"], "dev.semgrep.actions": ["monitor"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A08:2021 - Software and Data Integrity Failures"], "references": ["https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "AbUQzj", "url": "https://semgrep.dev/playground/r/jQTKQe/html.security.audit.missing-integrity.missing-integrity", "version_id": "jQTKQe"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity", "shortlink": "https://sg.run/krXA", "source": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity", "subcategory": ["audit"], "technology": ["html"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {"$...A": {"abstract_content": " src=\"http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars.min-v4.1.0.js\"", "end": {"col": 91, "line": 60, "offset": 2546}, "start": {"col": 12, "line": 60, "offset": 2467}}}, "severity": "WARNING"}, "path": "client/index.html", "start": {"col": 5, "line": 60, "offset": 2460}}, {"check_id": "html.security.audit.missing-integrity.missing-integrity", "end": {"col": 70, "line": 40, "offset": 1791}, "extra": {"engine_kind": "PRO", "fingerprint": "21218a0e45de02ee58aa22b87188eebe6d51a2bcdab28f0ed18b003bd4767db8507710139d480cd72791699f823e473a81eeb5c38bd5fc6f41d212ca72ccbfc1_0", "is_ignored": false, "lines": "  <script src=\"https://code.jquery.com/jquery-3.2.1.min.js\"></script>", "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-353: Missing Support for Integrity Check"], "dev.semgrep.actions": ["monitor"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A08:2021 - Software and Data Integrity Failures"], "references": ["https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "AbUQzj", "url": "https://semgrep.dev/playground/r/jQTKQe/html.security.audit.missing-integrity.missing-integrity", "version_id": "jQTKQe"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity", "shortlink": "https://sg.run/krXA", "source": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity", "subcategory": ["audit"], "technology": ["html"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {"$...A": {"abstract_content": " src=\"https://code.jquery.com/jquery-3.2.1.min.js\"", "end": {"col": 60, "line": 40, "offset": 1781}, "start": {"col": 10, "line": 40, "offset": 1731}}}, "severity": "WARNING"}, "path": "client/login.html", "start": {"col": 3, "line": 40, "offset": 1724}}, {"check_id": "html.security.audit.missing-integrity.missing-integrity", "end": {"col": 99, "line": 43, "offset": 2300}, "extra": {"engine_kind": "PRO", "fingerprint": "5e465fd32ca03e39ab639660f2c1040b4ca3dbb407a3faf1fb85fd57829a0d28812c08360d891ee2029ea167869a5968c2fe1391e84c3b692412ca121e3f417f_0", "is_ignored": false, "lines": "  <script src=\"http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars.min-v4.1.0.js\"></script>", "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-353: Missing Support for Integrity Check"], "dev.semgrep.actions": ["monitor"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A08:2021 - Software and Data Integrity Failures"], "references": ["https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "AbUQzj", "url": "https://semgrep.dev/playground/r/jQTKQe/html.security.audit.missing-integrity.missing-integrity", "version_id": "jQTKQe"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity", "shortlink": "https://sg.run/krXA", "source": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity", "subcategory": ["audit"], "technology": ["html"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {"$...A": {"abstract_content": " src=\"http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars.min-v4.1.0.js\"", "end": {"col": 89, "line": 43, "offset": 2290}, "start": {"col": 10, "line": 43, "offset": 2211}}}, "severity": "WARNING"}, "path": "client/login.html", "start": {"col": 3, "line": 43, "offset": 2204}}, {"check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "end": {"col": 26, "line": 55, "offset": 1630}, "extra": {"engine_kind": "PRO", "fingerprint": "e889fa7b3bb27e5fbd2cf221ee558ba7795814b6f239d54d073fd83ed7dbbef64e11d267d19c200333703dda2821c97dc29ebb65c048a509e9e3fd3bbefa582f_0", "is_ignored": false, "lines": "      e.printStackTrace();", "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-489: Active Debug Code"], "dev.semgrep.actions": ["monitor"], "impact": "LOW", "license": "proprietary license - copyright \u00a9 r2c", "likelihood": "LOW", "owasp": ["A10:2004 - Insecure Configuration Management", "A06:2017 - Security Misconfiguration", "A05:2021 - Security Misconfiguration"], "references": ["https://cwe.mitre.org/data/definitions/489.html", "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/", "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces", "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"], "semgrep.dev": {"rule": {"origin": "pro_rules", "rule_id": "v8U0rZ", "url": "https://semgrep.dev/playground/r/0bTvzX/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "version_id": "0bTvzX"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "shortlink": "https://sg.run/4K8z", "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "subcategory": ["audit"], "technology": ["java"], "vulnerability_class": ["Active Debug Code"]}, "metavars": {"$EXCEPTION": {"abstract_content": "e", "end": {"col": 8, "line": 55, "offset": 1612}, "start": {"col": 7, "line": 55, "offset": 1611}}}, "severity": "WARNING"}, "path": "src/main/java/com/scalesec/vulnado/Comment.java", "start": {"col": 7, "line": 55, "offset": 1611}}, {"check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "end": {"col": 26, "line": 70, "offset": 2105}, "extra": {"engine_kind": "PRO", "fingerprint": "e889fa7b3bb27e5fbd2cf221ee558ba7795814b6f239d54d073fd83ed7dbbef64e11d267d19c200333703dda2821c97dc29ebb65c048a509e9e3fd3bbefa582f_1", "is_ignored": false, "lines": "      e.printStackTrace();", "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-489: Active Debug Code"], "dev.semgrep.actions": ["monitor"], "impact": "LOW", "license": "proprietary license - copyright \u00a9 r2c", "likelihood": "LOW", "owasp": ["A10:2004 - Insecure Configuration Management", "A06:2017 - Security Misconfiguration", "A05:2021 - Security Misconfiguration"], "references": ["https://cwe.mitre.org/data/definitions/489.html", "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/", "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces", "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"], "semgrep.dev": {"rule": {"origin": "pro_rules", "rule_id": "v8U0rZ", "url": "https://semgrep.dev/playground/r/0bTvzX/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "version_id": "0bTvzX"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "shortlink": "https://sg.run/4K8z", "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "subcategory": ["audit"], "technology": ["java"], "vulnerability_class": ["Active Debug Code"]}, "metavars": {"$EXCEPTION": {"abstract_content": "e", "end": {"col": 8, "line": 70, "offset": 2087}, "start": {"col": 7, "line": 70, "offset": 2086}}}, "severity": "WARNING"}, "path": "src/main/java/com/scalesec/vulnado/Comment.java", "start": {"col": 7, "line": 70, "offset": 2086}}, {"check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "end": {"col": 26, "line": 24, "offset": 725}, "extra": {"engine_kind": "PRO", "fingerprint": "042e6fd11f4161db2d3c8be549cb86edf3e30f0d53ac9021ce7bd4f9c502cd2be3be3064fcaef943b6697bdb66f6215366c47e356789a2b15edb2f25b3f91691_0", "is_ignored": false, "lines": "      e.printStackTrace();", "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-489: Active Debug Code"], "dev.semgrep.actions": ["monitor"], "impact": "LOW", "license": "proprietary license - copyright \u00a9 r2c", "likelihood": "LOW", "owasp": ["A10:2004 - Insecure Configuration Management", "A06:2017 - Security Misconfiguration", "A05:2021 - Security Misconfiguration"], "references": ["https://cwe.mitre.org/data/definitions/489.html", "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/", "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces", "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"], "semgrep.dev": {"rule": {"origin": "pro_rules", "rule_id": "v8U0rZ", "url": "https://semgrep.dev/playground/r/0bTvzX/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "version_id": "0bTvzX"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "shortlink": "https://sg.run/4K8z", "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "subcategory": ["audit"], "technology": ["java"], "vulnerability_class": ["Active Debug Code"]}, "metavars": {"$EXCEPTION": {"abstract_content": "e", "end": {"col": 8, "line": 24, "offset": 707}, "start": {"col": 7, "line": 24, "offset": 706}}}, "severity": "WARNING"}, "path": "src/main/java/com/scalesec/vulnado/Cowsay.java", "start": {"col": 7, "line": 24, "offset": 706}}, {"check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "end": {"col": 32, "line": 25, "offset": 863}, "extra": {"engine_kind": "PRO", "fingerprint": "e4f44494060880deb184db27b069e1de12f4239eda5f1e024c4d6c9b923406c80c21a928bad43c4f69caed2020543aaed84c67ff0a74fb0ab838341efcb8a095_0", "is_ignored": false, "lines": "            e.printStackTrace();", "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-489: Active Debug Code"], "dev.semgrep.actions": ["monitor"], "impact": "LOW", "license": "proprietary license - copyright \u00a9 r2c", "likelihood": "LOW", "owasp": ["A10:2004 - Insecure Configuration Management", "A06:2017 - Security Misconfiguration", "A05:2021 - Security Misconfiguration"], "references": ["https://cwe.mitre.org/data/definitions/489.html", "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/", "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces", "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"], "semgrep.dev": {"rule": {"origin": "pro_rules", "rule_id": "v8U0rZ", "url": "https://semgrep.dev/playground/r/0bTvzX/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "version_id": "0bTvzX"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "shortlink": "https://sg.run/4K8z", "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "subcategory": ["audit"], "technology": ["java"], "vulnerability_class": ["Active Debug Code"]}, "metavars": {"$EXCEPTION": {"abstract_content": "e", "end": {"col": 14, "line": 25, "offset": 845}, "start": {"col": 13, "line": 25, "offset": 844}}}, "severity": "WARNING"}, "path": "src/main/java/com/scalesec/vulnado/Postgres.java", "start": {"col": 13, "line": 25, "offset": 844}}, {"check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "end": {"col": 29, "line": 100, "offset": 3833}, "extra": {"engine_kind": "PRO", "fingerprint": "e4f44494060880deb184db27b069e1de12f4239eda5f1e024c4d6c9b923406c80c21a928bad43c4f69caed2020543aaed84c67ff0a74fb0ab838341efcb8a095_1", "is_ignored": false, "lines": "         e.printStackTrace();", "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-489: Active Debug Code"], "dev.semgrep.actions": ["monitor"], "impact": "LOW", "license": "proprietary license - copyright \u00a9 r2c", "likelihood": "LOW", "owasp": ["A10:2004 - Insecure Configuration Management", "A06:2017 - Security Misconfiguration", "A05:2021 - Security Misconfiguration"], "references": ["https://cwe.mitre.org/data/definitions/489.html", "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/", "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces", "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"], "semgrep.dev": {"rule": {"origin": "pro_rules", "rule_id": "v8U0rZ", "url": "https://semgrep.dev/playground/r/0bTvzX/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "version_id": "0bTvzX"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "shortlink": "https://sg.run/4K8z", "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "subcategory": ["audit"], "technology": ["java"], "vulnerability_class": ["Active Debug Code"]}, "metavars": {"$EXCEPTION": {"abstract_content": "e", "end": {"col": 11, "line": 100, "offset": 3815}, "start": {"col": 10, "line": 100, "offset": 3814}}}, "severity": "WARNING"}, "path": "src/main/java/com/scalesec/vulnado/Postgres.java", "start": {"col": 10, "line": 100, "offset": 3814}}, {"check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "end": {"col": 32, "line": 114, "offset": 4414}, "extra": {"engine_kind": "PRO", "fingerprint": "e4f44494060880deb184db27b069e1de12f4239eda5f1e024c4d6c9b923406c80c21a928bad43c4f69caed2020543aaed84c67ff0a74fb0ab838341efcb8a095_2", "is_ignored": false, "lines": "            e.printStackTrace();", "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-489: Active Debug Code"], "dev.semgrep.actions": ["monitor"], "impact": "LOW", "license": "proprietary license - copyright \u00a9 r2c", "likelihood": "LOW", "owasp": ["A10:2004 - Insecure Configuration Management", "A06:2017 - Security Misconfiguration", "A05:2021 - Security Misconfiguration"], "references": ["https://cwe.mitre.org/data/definitions/489.html", "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/", "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces", "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"], "semgrep.dev": {"rule": {"origin": "pro_rules", "rule_id": "v8U0rZ", "url": "https://semgrep.dev/playground/r/0bTvzX/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "version_id": "0bTvzX"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "shortlink": "https://sg.run/4K8z", "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "subcategory": ["audit"], "technology": ["java"], "vulnerability_class": ["Active Debug Code"]}, "metavars": {"$EXCEPTION": {"abstract_content": "e", "end": {"col": 14, "line": 114, "offset": 4396}, "start": {"col": 13, "line": 114, "offset": 4395}}}, "severity": "WARNING"}, "path": "src/main/java/com/scalesec/vulnado/Postgres.java", "start": {"col": 13, "line": 114, "offset": 4395}}, {"check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "end": {"col": 26, "line": 34, "offset": 986}, "extra": {"engine_kind": "PRO", "fingerprint": "3d537b330800d3cbc5f096912fdbdc3148ba114b3fe30ff3890083237f8dfe0a48424eed29301ea3e3b22e35bb3586cb46e5940cb81eba62378fe22460383e21_0", "is_ignored": false, "lines": "      e.printStackTrace();", "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-489: Active Debug Code"], "dev.semgrep.actions": ["monitor"], "impact": "LOW", "license": "proprietary license - copyright \u00a9 r2c", "likelihood": "LOW", "owasp": ["A10:2004 - Insecure Configuration Management", "A06:2017 - Security Misconfiguration", "A05:2021 - Security Misconfiguration"], "references": ["https://cwe.mitre.org/data/definitions/489.html", "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/", "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces", "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"], "semgrep.dev": {"rule": {"origin": "pro_rules", "rule_id": "v8U0rZ", "url": "https://semgrep.dev/playground/r/0bTvzX/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "version_id": "0bTvzX"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "shortlink": "https://sg.run/4K8z", "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "subcategory": ["audit"], "technology": ["java"], "vulnerability_class": ["Active Debug Code"]}, "metavars": {"$EXCEPTION": {"abstract_content": "e", "end": {"col": 8, "line": 34, "offset": 968}, "start": {"col": 7, "line": 34, "offset": 967}}}, "severity": "WARNING"}, "path": "src/main/java/com/scalesec/vulnado/User.java", "start": {"col": 7, "line": 34, "offset": 967}}, {"check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "end": {"col": 26, "line": 58, "offset": 1758}, "extra": {"engine_kind": "PRO", "fingerprint": "3d537b330800d3cbc5f096912fdbdc3148ba114b3fe30ff3890083237f8dfe0a48424eed29301ea3e3b22e35bb3586cb46e5940cb81eba62378fe22460383e21_1", "is_ignored": false, "lines": "      e.printStackTrace();", "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-489: Active Debug Code"], "dev.semgrep.actions": ["monitor"], "impact": "LOW", "license": "proprietary license - copyright \u00a9 r2c", "likelihood": "LOW", "owasp": ["A10:2004 - Insecure Configuration Management", "A06:2017 - Security Misconfiguration", "A05:2021 - Security Misconfiguration"], "references": ["https://cwe.mitre.org/data/definitions/489.html", "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/", "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces", "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"], "semgrep.dev": {"rule": {"origin": "pro_rules", "rule_id": "v8U0rZ", "url": "https://semgrep.dev/playground/r/0bTvzX/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "version_id": "0bTvzX"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "shortlink": "https://sg.run/4K8z", "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "subcategory": ["audit"], "technology": ["java"], "vulnerability_class": ["Active Debug Code"]}, "metavars": {"$EXCEPTION": {"abstract_content": "e", "end": {"col": 8, "line": 58, "offset": 1740}, "start": {"col": 7, "line": 58, "offset": 1739}}}, "severity": "WARNING"}, "path": "src/main/java/com/scalesec/vulnado/User.java", "start": {"col": 7, "line": 58, "offset": 1739}}, {"check_id": "java.lang.security.audit.command-injection-process-builder.command-injection-process-builder", "end": {"col": 46, "line": 11, "offset": 348}, "extra": {"engine_kind": "PRO", "fingerprint": "0d6c8848299280b7ac6617dcc57730fcdd574bcfeec57d0b5c821dab78933948be85f1f57ade6667a8a561381dba4eb6efbeed5df2c55ad12397ee166321b0c3_0", "is_ignored": false, "lines": "    processBuilder.command(\"bash\", \"-c\", cmd);", "message": "A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "4bUzzo", "url": "https://semgrep.dev/playground/r/3ZTd3l/java.lang.security.audit.command-injection-process-builder.command-injection-process-builder", "version_id": "3ZTd3l"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.command-injection-process-builder.command-injection-process-builder", "shortlink": "https://sg.run/gJJe", "source": "https://semgrep.dev/r/java.lang.security.audit.command-injection-process-builder.command-injection-process-builder", "subcategory": ["audit"], "technology": ["java"], "vulnerability_class": ["Command Injection"]}, "metavars": {"$ARG": {"abstract_content": "cmd", "end": {"col": 45, "line": 11, "offset": 347}, "propagated_value": {"svalue_abstract_content": "\"/usr/games/cowsay '\"+input+\"'\"", "svalue_end": {"col": 53, "line": 9, "offset": 272}, "svalue_start": {"col": 18, "line": 9, "offset": 237}}, "start": {"col": 42, "line": 11, "offset": 344}}, "$PB": {"abstract_content": "processBuilder", "end": {"col": 19, "line": 11, "offset": 321}, "propagated_value": {"svalue_abstract_content": "new ProcessBuilder()", "svalue_end": {"col": 57, "line": 8, "offset": 218}, "svalue_start": {"col": 37, "line": 8, "offset": 198}}, "start": {"col": 5, "line": 11, "offset": 307}}, "$TYPE": {"abstract_content": "ProcessBuilder", "end": {"col": 19, "line": 8, "offset": 180}, "start": {"col": 5, "line": 8, "offset": 166}}}, "severity": "ERROR"}, "path": "src/main/java/com/scalesec/vulnado/Cowsay.java", "start": {"col": 5, "line": 11, "offset": 307}}, {"check_id": "java.lang.security.audit.crypto.use-of-md5.use-of-md5", "end": {"col": 63, "line": 67, "offset": 2546}, "extra": {"engine_kind": "PRO", "fingerprint": "acf1953c26267ce1e040c2939abf3172f138c9751c0257cdbcadd7718e7bb9b754bf393b6d6982f872c5a333608cb97149d51aaf1c7677190b35ef705a22b250_0", "fix": "\"SHA-512\"", "is_ignored": false, "lines": "            MessageDigest md = MessageDigest.getInstance(\"MD5\");", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-328: Use of Weak Hash"], "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "KxU5lW", "url": "https://semgrep.dev/playground/r/DkTQGo/java.lang.security.audit.crypto.use-of-md5.use-of-md5", "version_id": "DkTQGo"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-md5.use-of-md5", "shortlink": "https://sg.run/ryJn", "source": "https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-md5.use-of-md5", "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5", "subcategory": ["vuln"], "technology": ["java"], "vulnerability_class": ["Insecure Hashing Algorithm"]}, "metavars": {"$ALGO": {"abstract_content": "\"MD5\"", "end": {"col": 63, "line": 67, "offset": 2546}, "start": {"col": 58, "line": 67, "offset": 2541}}}, "severity": "WARNING"}, "path": "src/main/java/com/scalesec/vulnado/Postgres.java", "start": {"col": 58, "line": 67, "offset": 2541}}, {"check_id": "java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep", "end": {"col": 46, "line": 49, "offset": 1445}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "input", "location": {"end": {"col": 54, "line": 19, "offset": 669}, "path": "src/main/java/com/scalesec/vulnado/LoginController.java", "start": {"col": 49, "line": 19, "offset": 664}}}], "taint_sink": ["CliCall", [[{"end": {"col": 27, "line": 20, "offset": 699}, "path": "src/main/java/com/scalesec/vulnado/LoginController.java", "start": {"col": 17, "line": 20, "offset": 689}}, "User.fetch"], [{"content": "un", "location": {"end": {"col": 37, "line": 39, "offset": 1081}, "path": "src/main/java/com/scalesec/vulnado/User.java", "start": {"col": 35, "line": 39, "offset": 1079}}}, {"content": "query", "location": {"end": {"col": 19, "line": 47, "offset": 1303}, "path": "src/main/java/com/scalesec/vulnado/User.java", "start": {"col": 14, "line": 47, "offset": 1298}}}], ["CliLoc", [{"end": {"col": 46, "line": 49, "offset": 1445}, "path": "src/main/java/com/scalesec/vulnado/User.java", "start": {"col": 22, "line": 49, "offset": 1421}}, "stmt.executeQuery(query)"]]]], "taint_source": ["CliLoc", [{"end": {"col": 54, "line": 19, "offset": 669}, "path": "src/main/java/com/scalesec/vulnado/LoginController.java", "start": {"col": 49, "line": 19, "offset": 664}}, "input"]]}, "engine_kind": "PRO", "fingerprint": "8565720d9b12406803daec09129dc663220799d82561b1276ce022812a1582c016429976bdef2e5e8533c6081720aa48641dde5a0f72493883e4f61d319cd8c9_0", "is_ignored": false, "lines": "      ResultSet rs = stmt.executeQuery(query);", "message": "Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.", "metadata": {"asvs": {"control_id": "5.3.5 Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "section": "V5: Validation, Sanitization and Encoding Verification Requirements", "version": "4"}, "category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "dev.semgrep.actions": ["monitor"], "impact": "HIGH", "interfile": true, "license": "proprietary license - copyright \u00a9 r2c", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html", "https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps", "https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"], "semgrep.dev": {"rule": {"origin": "pro_rules", "rule_id": "v8U3yY", "url": "https://semgrep.dev/playground/r/7ZT7op/java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep", "version_id": "7ZT7op"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep", "shortlink": "https://sg.run/w5kd", "source": "https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep", "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION", "subcategory": ["audit"], "technology": ["java"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$METHODNAME": {"abstract_content": "login login login login login", "end": {"col": 22, "line": 19, "offset": 637}, "start": {"col": 17, "line": 19, "offset": 632}}, "$REQ": {"abstract_content": "RequestBody", "end": {"col": 35, "line": 19, "offset": 650}, "start": {"col": 24, "line": 19, "offset": 639}}, "$S": {"abstract_content": "stmt", "end": {"col": 26, "line": 49, "offset": 1425}, "start": {"col": 22, "line": 49, "offset": 1421}}, "$SOURCE": {"abstract_content": "input", "end": {"col": 54, "line": 19, "offset": 669}, "start": {"col": 49, "line": 19, "offset": 664}}, "$SQLFUNC": {"abstract_content": "executeQuery", "end": {"col": 39, "line": 49, "offset": 1438}, "start": {"col": 27, "line": 49, "offset": 1426}}, "$TYPE": {"abstract_content": "LoginRequest LoginRequest LoginRequest LoginRequest", "end": {"col": 48, "line": 19, "offset": 663}, "start": {"col": 36, "line": 19, "offset": 651}}}, "severity": "ERROR"}, "path": "src/main/java/com/scalesec/vulnado/User.java", "start": {"col": 22, "line": 49, "offset": 1421}}, {"check_id": "java.lang.security.audit.formatted-sql-string.formatted-sql-string", "end": {"col": 46, "line": 49, "offset": 1445}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "query", "location": {"end": {"col": 19, "line": 47, "offset": 1303}, "path": "src/main/java/com/scalesec/vulnado/User.java", "start": {"col": 14, "line": 47, "offset": 1298}}}], "taint_sink": ["CliLoc", [{"end": {"col": 46, "line": 49, "offset": 1445}, "path": "src/main/java/com/scalesec/vulnado/User.java", "start": {"col": 22, "line": 49, "offset": 1421}}, "stmt.executeQuery(query)"]], "taint_source": ["CliLoc", [{"end": {"col": 67, "line": 47, "offset": 1351}, "path": "src/main/java/com/scalesec/vulnado/User.java", "start": {"col": 65, "line": 47, "offset": 1349}}, "un"]]}, "engine_kind": "PRO", "fingerprint": "1e86be66c80cb8c5a41b827882aa6a44b16ec87ee692e5cbaf890efb92cc59428a2f15f093048bd3eba8fa39806af6761e3f54f8c406b223592b5136fb212fd7_0", "is_ignored": false, "lines": "      ResultSet rs = stmt.executeQuery(query);", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metadata": {"asvs": {"control_id": "5.3.5 Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "section": "V5: Validation, Sanitization and Encoding Verification Requirements", "version": "4"}, "category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html", "https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps", "https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "QrUzxR", "url": "https://semgrep.dev/playground/r/o5TnB6/java.lang.security.audit.formatted-sql-string.formatted-sql-string", "version_id": "o5TnB6"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string", "shortlink": "https://sg.run/OPXp", "source": "https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string", "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION", "subcategory": ["vuln"], "technology": ["java"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$ANNOT": {"abstract_content": "User", "end": {"col": 21, "line": 39, "offset": 1065}, "start": {"col": 17, "line": 39, "offset": 1061}}, "$FUNC": {"abstract_content": "fetch", "end": {"col": 27, "line": 39, "offset": 1071}, "start": {"col": 22, "line": 39, "offset": 1066}}, "$S": {"abstract_content": "stmt", "end": {"col": 26, "line": 49, "offset": 1425}, "propagated_value": {"svalue_abstract_content": "cxn.createStatement()", "svalue_end": {"col": 35, "line": 44, "offset": 1224}, "svalue_start": {"col": 14, "line": 44, "offset": 1203}}, "start": {"col": 22, "line": 49, "offset": 1421}}, "$SQLFUNC": {"abstract_content": "executeQuery", "end": {"col": 39, "line": 49, "offset": 1438}, "start": {"col": 27, "line": 49, "offset": 1426}}}, "severity": "ERROR"}, "path": "src/main/java/com/scalesec/vulnado/User.java", "start": {"col": 22, "line": 49, "offset": 1421}}, {"check_id": "java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli", "end": {"col": 46, "line": 49, "offset": 1445}, "extra": {"engine_kind": "PRO", "fingerprint": "ee05dbb4edcaa395673f467f6523d651dee737cefd001c955770aed3007976740942702d79a0f097271e94c19df28ebf4a549da6bf47024bd3d26a5669d1038f_0", "is_ignored": false, "lines": "      ResultSet rs = stmt.executeQuery(query);", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "oqUe8K", "url": "https://semgrep.dev/playground/r/xyT4dv/java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli", "version_id": "xyT4dv"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli", "shortlink": "https://sg.run/AvkL", "source": "https://semgrep.dev/r/java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli", "subcategory": ["audit"], "technology": ["jdbc"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$METHOD": {"abstract_content": "executeQuery", "end": {"col": 39, "line": 49, "offset": 1438}, "start": {"col": 27, "line": 49, "offset": 1426}}, "$S": {"abstract_content": "stmt", "end": {"col": 26, "line": 49, "offset": 1425}, "propagated_value": {"svalue_abstract_content": "cxn.createStatement()", "svalue_end": {"col": 35, "line": 44, "offset": 1224}, "svalue_start": {"col": 14, "line": 44, "offset": 1203}}, "start": {"col": 22, "line": 49, "offset": 1421}}, "$SQL": {"abstract_content": "query", "end": {"col": 45, "line": 49, "offset": 1444}, "propagated_value": {"svalue_abstract_content": "\"select * from users where username = '\"+un+\"' limit 1\"", "svalue_end": {"col": 81, "line": 47, "offset": 1365}, "svalue_start": {"col": 22, "line": 47, "offset": 1306}}, "start": {"col": 40, "line": 49, "offset": 1439}}, "$X": {"abstract_content": "\"select * from users where username = '\"+un", "end": {"col": 67, "line": 47, "offset": 1351}, "start": {"col": 22, "line": 47, "offset": 1306}}, "$Y": {"abstract_content": "\"' limit 1\"", "end": {"col": 81, "line": 47, "offset": 1365}, "start": {"col": 70, "line": 47, "offset": 1354}}}, "severity": "WARNING"}, "path": "src/main/java/com/scalesec/vulnado/User.java", "start": {"col": 22, "line": 49, "offset": 1421}}, {"check_id": "java.spring.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 81, "line": 47, "offset": 1365}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "input", "location": {"end": {"col": 54, "line": 19, "offset": 669}, "path": "src/main/java/com/scalesec/vulnado/LoginController.java", "start": {"col": 49, "line": 19, "offset": 664}}}], "taint_sink": ["CliCall", [[{"end": {"col": 27, "line": 20, "offset": 699}, "path": "src/main/java/com/scalesec/vulnado/LoginController.java", "start": {"col": 17, "line": 20, "offset": 689}}, "User.fetch"], [{"content": "un", "location": {"end": {"col": 37, "line": 39, "offset": 1081}, "path": "src/main/java/com/scalesec/vulnado/User.java", "start": {"col": 35, "line": 39, "offset": 1079}}}], ["CliLoc", [{"end": {"col": 81, "line": 47, "offset": 1365}, "path": "src/main/java/com/scalesec/vulnado/User.java", "start": {"col": 22, "line": 47, "offset": 1306}}, "\"select * from users where username = '\" + un + \"' limit 1\""]]]], "taint_source": ["CliLoc", [{"end": {"col": 54, "line": 19, "offset": 669}, "path": "src/main/java/com/scalesec/vulnado/LoginController.java", "start": {"col": 49, "line": 19, "offset": 664}}, "input"]]}, "engine_kind": "PRO", "fingerprint": "dbf11127a8d75d6ef95b6973e8bb411e7461cac8c2e8a782edf24ec2bfc883377bd8e88676188454b2d410f30ce91e0e26d561e81ea7896985bbc7b9c69f1061_0", "is_ignored": false, "lines": "      String query = \"select * from users where username = '\" + un + \"' limit 1\";", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "10UdRR", "url": "https://semgrep.dev/playground/r/7ZTOrb/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "7ZTOrb"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "shortlink": "https://sg.run/9rzz", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["spring"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$METHODNAME": {"abstract_content": "login login login login login", "end": {"col": 22, "line": 19, "offset": 637}, "start": {"col": 17, "line": 19, "offset": 632}}, "$REQ": {"abstract_content": "RequestBody", "end": {"col": 35, "line": 19, "offset": 650}, "start": {"col": 24, "line": 19, "offset": 639}}, "$SOURCE": {"abstract_content": "input", "end": {"col": 54, "line": 19, "offset": 669}, "start": {"col": 49, "line": 19, "offset": 664}}, "$SQLSTR": {"abstract_content": "select * from users where username = '", "end": {"col": 61, "line": 47, "offset": 1345}, "start": {"col": 23, "line": 47, "offset": 1307}}, "$TYPE": {"abstract_content": "LoginRequest LoginRequest LoginRequest LoginRequest", "end": {"col": 48, "line": 19, "offset": 663}, "start": {"col": 36, "line": 19, "offset": 651}}}, "severity": "ERROR"}, "path": "src/main/java/com/scalesec/vulnado/User.java", "start": {"col": 22, "line": 47, "offset": 1306}}, {"check_id": "java.spring.security.injection.tainted-url-host.tainted-url-host", "end": {"col": 29, "line": 26, "offset": 697}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "url", "location": {"end": {"col": 48, "line": 20, "offset": 655}, "path": "src/main/java/com/scalesec/vulnado/LinksController.java", "start": {"col": 45, "line": 20, "offset": 652}}}], "taint_sink": ["CliCall", [[{"end": {"col": 33, "line": 21, "offset": 708}, "path": "src/main/java/com/scalesec/vulnado/LinksController.java", "start": {"col": 12, "line": 21, "offset": 687}}, "LinkLister.getLinksV2"], [{"content": "url", "location": {"end": {"col": 51, "line": 24, "offset": 637}, "path": "src/main/java/com/scalesec/vulnado/LinkLister.java", "start": {"col": 48, "line": 24, "offset": 634}}}], ["CliLoc", [{"end": {"col": 29, "line": 26, "offset": 697}, "path": "src/main/java/com/scalesec/vulnado/LinkLister.java", "start": {"col": 17, "line": 26, "offset": 685}}, "new URL(url)"]]]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 20, "offset": 655}, "path": "src/main/java/com/scalesec/vulnado/LinksController.java", "start": {"col": 45, "line": 20, "offset": 652}}, "url"]]}, "engine_kind": "PRO", "fingerprint": "05bfc795c647148002b8d1046a5949f00a76fcc2600cdbd4e27b7e683859c75e84c529e5d168b3319a83b1bfe8b5d96b4d34db7553b02588e19015d4bea2210e_0", "is_ignored": false, "lines": "      URL aUrl= new URL(url);", "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "oqUZo8", "url": "https://semgrep.dev/playground/r/8KTbK9/java.spring.security.injection.tainted-url-host.tainted-url-host", "version_id": "8KTbK9"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host", "shortlink": "https://sg.run/vkYn", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$METHODNAME": {"abstract_content": "linksV2 linksV2 linksV2 linksV2 linksV2", "end": {"col": 23, "line": 20, "offset": 630}, "start": {"col": 16, "line": 20, "offset": 623}}, "$ONEARG": {"abstract_content": "url", "end": {"col": 28, "line": 26, "offset": 696}, "start": {"col": 25, "line": 26, "offset": 693}}, "$REQ": {"abstract_content": "RequestParam", "end": {"col": 37, "line": 20, "offset": 644}, "start": {"col": 25, "line": 20, "offset": 632}}, "$SOURCE": {"abstract_content": "url", "end": {"col": 48, "line": 20, "offset": 655}, "start": {"col": 45, "line": 20, "offset": 652}}, "$TYPE": {"abstract_content": "String", "end": {"col": 44, "line": 20, "offset": 651}, "start": {"col": 38, "line": 20, "offset": 645}}}, "severity": "ERROR"}, "path": "src/main/java/com/scalesec/vulnado/LinkLister.java", "start": {"col": 17, "line": 26, "offset": 685}}, {"check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "end": {"col": 20, "line": 11, "offset": 250}, "extra": {"engine_kind": "PRO", "fingerprint": "4f4e967eed317465c1bbbe2bd9800f7fed85f10dec58952e7562190c68712a56742af87e6bad8af6258f6341216f97923ce229f434da6ae5c4921eb2a60f0d80_0", "is_ignored": false, "lines": "    @RequestMapping(value = \"/cowsay\")", "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "wdUJ7q", "url": "https://semgrep.dev/playground/r/gETqeO/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "version_id": "gETqeO"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "shortlink": "https://sg.run/2xlq", "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING", "subcategory": ["audit"], "technology": ["spring"], "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]}, "metavars": {"$METHOD": {"abstract_content": "cowsay", "end": {"col": 18, "line": 12, "offset": 287}, "start": {"col": 12, "line": 12, "offset": 281}}, "$RETURNTYPE": {"abstract_content": "String", "end": {"col": 11, "line": 12, "offset": 280}, "start": {"col": 5, "line": 12, "offset": 274}}}, "severity": "WARNING"}, "path": "src/main/java/com/scalesec/vulnado/CowController.java", "start": {"col": 6, "line": 11, "offset": 236}}, {"check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "end": {"col": 18, "line": 15, "offset": 380}, "extra": {"engine_kind": "PRO", "fingerprint": "efeaa4946217dc9b8a84bff5cab5f704f12031315b18f573772c4e8378f63335e8a5f5485a87b1b11ad69e81d7960d43cb20f3bc26d765fe2a2a87cb2d96d20a_0", "is_ignored": false, "lines": "  @RequestMapping(value = \"/links\", produces = \"application/json\")", "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "wdUJ7q", "url": "https://semgrep.dev/playground/r/gETqeO/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "version_id": "gETqeO"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "shortlink": "https://sg.run/2xlq", "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING", "subcategory": ["audit"], "technology": ["spring"], "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]}, "metavars": {"$METHOD": {"abstract_content": "links", "end": {"col": 21, "line": 16, "offset": 450}, "start": {"col": 16, "line": 16, "offset": 445}}, "$RETURNTYPE": {"abstract_content": "List<String>", "end": {"col": 15, "line": 16, "offset": 444}, "start": {"col": 3, "line": 16, "offset": 432}}}, "severity": "WARNING"}, "path": "src/main/java/com/scalesec/vulnado/LinksController.java", "start": {"col": 4, "line": 15, "offset": 366}}, {"check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "end": {"col": 18, "line": 19, "offset": 555}, "extra": {"engine_kind": "PRO", "fingerprint": "af78c11f21af7db5e0fae35c982bbb526ff85afb299182b70a6c9a7ae01b92487d8737bd6d39c08782dab6327efe95ffaed2bb709487444392ac69d18a9b9d1f_0", "is_ignored": false, "lines": "  @RequestMapping(value = \"/links-v2\", produces = \"application/json\")", "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "wdUJ7q", "url": "https://semgrep.dev/playground/r/gETqeO/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "version_id": "gETqeO"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "shortlink": "https://sg.run/2xlq", "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING", "subcategory": ["audit"], "technology": ["spring"], "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]}, "metavars": {"$METHOD": {"abstract_content": "linksV2", "end": {"col": 23, "line": 20, "offset": 630}, "start": {"col": 16, "line": 20, "offset": 623}}, "$RETURNTYPE": {"abstract_content": "List<String>", "end": {"col": 15, "line": 20, "offset": 622}, "start": {"col": 3, "line": 20, "offset": 610}}}, "severity": "WARNING"}, "path": "src/main/java/com/scalesec/vulnado/LinksController.java", "start": {"col": 4, "line": 19, "offset": 541}}, {"check_id": "javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape", "end": {"col": 46, "line": 73, "offset": 3130}, "extra": {"engine_kind": "PRO", "fingerprint": "720756bc598e9133a9562b895526883b3f2549c187c2c95227d0557f15dfab951b0c82d95eb360785ba623adbf0ac0e72f9358125df5a7c3a558a55eb12444b5_0", "is_ignored": false, "lines": "              <p class=\"card-text\">{{{body}}}</p>", "message": "Detected an explicit unescape in a Mustache template, using triple braces '{{{...}}}' or ampersand '&'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://github.com/janl/mustache.js/#variables", "https://ractive.js.org/v0.x/0.7/mustaches#variables"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUgG1", "url": "https://semgrep.dev/playground/r/6xTeQb/javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape", "version_id": "6xTeQb"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape", "shortlink": "https://sg.run/Lwx9", "source": "https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape", "subcategory": ["audit"], "technology": ["express"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "y", "end": {"col": 43, "line": 73, "offset": 3127}, "start": {"col": 42, "line": 73, "offset": 3126}}}, "severity": "WARNING"}, "path": "client/index.html", "start": {"col": 36, "line": 73, "offset": 3120}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 47, "line": 63, "offset": 2712}, "extra": {"engine_kind": "PRO", "fingerprint": "bf34155c5e4969981cfbc0dbd4441d2a2e384c31168723fe3c2bd6d9c430a0f6d05ae30fc06c7a5ff9f4ff4599fe14318896f083596b65e90f2d5f0ea046a3ae_0", "is_ignored": false, "lines": "      <div class=\"row\" data-comment_id=\"{{id}}\">", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "qNUjk3", "url": "https://semgrep.dev/playground/r/ExTnXv/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "version_id": "ExTnXv"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "subcategory": ["audit"], "technology": ["django"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {}, "severity": "ERROR"}, "path": "client/index.html", "start": {"col": 41, "line": 63, "offset": 2706}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 35, "line": 67, "offset": 2868}, "extra": {"engine_kind": "PRO", "fingerprint": "bf34155c5e4969981cfbc0dbd4441d2a2e384c31168723fe3c2bd6d9c430a0f6d05ae30fc06c7a5ff9f4ff4599fe14318896f083596b65e90f2d5f0ea046a3ae_1", "is_ignored": false, "lines": "              <strong>{{username}}</strong> commented at {{created_on}}", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "qNUjk3", "url": "https://semgrep.dev/playground/r/ExTnXv/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "version_id": "ExTnXv"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "subcategory": ["audit"], "technology": ["django"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {}, "severity": "ERROR"}, "path": "client/index.html", "start": {"col": 23, "line": 67, "offset": 2856}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 72, "line": 67, "offset": 2905}, "extra": {"engine_kind": "PRO", "fingerprint": "bf34155c5e4969981cfbc0dbd4441d2a2e384c31168723fe3c2bd6d9c430a0f6d05ae30fc06c7a5ff9f4ff4599fe14318896f083596b65e90f2d5f0ea046a3ae_2", "is_ignored": false, "lines": "              <strong>{{username}}</strong> commented at {{created_on}}", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "qNUjk3", "url": "https://semgrep.dev/playground/r/ExTnXv/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "version_id": "ExTnXv"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "subcategory": ["audit"], "technology": ["django"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {}, "severity": "ERROR"}, "path": "client/index.html", "start": {"col": 58, "line": 67, "offset": 2891}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 45, "line": 73, "offset": 3129}, "extra": {"engine_kind": "PRO", "fingerprint": "bf34155c5e4969981cfbc0dbd4441d2a2e384c31168723fe3c2bd6d9c430a0f6d05ae30fc06c7a5ff9f4ff4599fe14318896f083596b65e90f2d5f0ea046a3ae_3", "is_ignored": false, "lines": "              <p class=\"card-text\">{{{body}}}</p>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "qNUjk3", "url": "https://semgrep.dev/playground/r/ExTnXv/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "version_id": "ExTnXv"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "subcategory": ["audit"], "technology": ["django"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {}, "severity": "ERROR"}, "path": "client/index.html", "start": {"col": 37, "line": 73, "offset": 3121}}, {"check_id": "terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address", "end": {"col": 2, "line": 41, "offset": 745}, "extra": {"engine_kind": "PRO", "fingerprint": "acedd5fd71ad62d918792555d5c88062cd44934ca0f032e45ef77515ca9514913ebc08333232a5741f27fb115c74e1c90cb5d041b1da0963274c9430577a916e_0", "is_ignored": false, "lines": "resource \"aws_subnet\" \"subnet\" {\n  vpc_id     = \"${aws_vpc.main.id}\"\n  cidr_block = \"${var.subnet_cidr}\"\n  availability_zone = \"${var.region}b\"\n  map_public_ip_on_launch = true\n  tags = {\n    Name = \"tmp_vulnado_rev_shell_subnet\"\n  }\n}", "message": "Resources in the AWS subnet are assigned a public IP address. Resources should not be exposed on the public internet, but should have access limited to consumers required for the function of your application. Set `map_public_ip_on_launch` to false so that resources are not publicly-accessible.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-284: Improper Access Control"], "dev.semgrep.actions": ["monitor"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet#map_public_ip_on_launch", "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "2ZUo79", "url": "https://semgrep.dev/playground/r/o5Tnve/terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address", "version_id": "o5Tnve"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address", "shortlink": "https://sg.run/XJZw", "source": "https://semgrep.dev/r/terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address", "subcategory": ["audit"], "technology": ["terraform", "aws"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$ANYTHING": {"abstract_content": "subnet", "end": {"col": 30, "line": 33, "offset": 539}, "start": {"col": 24, "line": 33, "offset": 533}}}, "severity": "WARNING"}, "path": "reverse_shell/main.tf", "start": {"col": 1, "line": 33, "offset": 510}}, {"check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges", "end": {"col": 5, "line": 23, "offset": 328}, "extra": {"engine_kind": "PRO", "fingerprint": "732807a0e6941cedf54ae89ecfb6ee267a335764a3d4a3cd83f443d7799554bc68523f695347ac2aafefe42258e02e1b8dda56463f35f912a6205f922e98c6f0_0", "is_ignored": false, "lines": "  db:", "message": "Service 'db' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "qNUoWr", "url": "https://semgrep.dev/playground/r/vdT2zp/yaml.docker-compose.security.no-new-privileges.no-new-privileges", "version_id": "vdT2zp"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges", "shortlink": "https://sg.run/0n8q", "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges", "subcategory": ["audit"], "technology": ["docker-compose"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$SERVICE": {"abstract_content": "db", "end": {"col": 5, "line": 23, "offset": 328}, "start": {"col": 3, "line": 23, "offset": 326}}}, "severity": "WARNING"}, "path": "docker-compose.yml", "start": {"col": 3, "line": 23, "offset": 326}}, {"check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "end": {"col": 5, "line": 23, "offset": 328}, "extra": {"engine_kind": "PRO", "fingerprint": "a4c9a5b5da893201bcf0908973bfd478af5ce99508d5c1313c871a7cd96bf620cc2c844d70e6da41d1f6e470eed9006460a3c74048353a89477dec781d9b1505_0", "is_ignored": false, "lines": "  db:", "message": "Service 'db' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "dev.semgrep.actions": ["monitor"], "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir", "https://blog.atomist.com/security-of-docker-kubernetes/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "v8U5vN", "url": "https://semgrep.dev/playground/r/ExTnDK/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "version_id": "ExTnDK"}}, "semgrep.policy": {"id": 55896, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "semgrep.ruleset": "default", "semgrep.url": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "shortlink": "https://sg.run/e4JE", "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "subcategory": ["audit"], "technology": ["docker-compose"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$SERVICE": {"abstract_content": "db", "end": {"col": 5, "line": 23, "offset": 328}, "start": {"col": 3, "line": 23, "offset": 326}}}, "severity": "WARNING"}, "path": "docker-compose.yml", "start": {"col": 3, "line": 23, "offset": 326}}, {"check_id": "ssc-f94379b4-47ec-4137-a18e-dd5a0ef4ec9d", "end": {"col": 0, "line": 62, "offset": 0}, "extra": {"engine_kind": "OSS", "fingerprint": "dd49b550aeba555f25cdd644cd6af79c789f671e24416a78f186d84b5d2ce2033768c223c14a37281e07c020ef488f4e0063e9c8cffea4cacc0f20a20802dbd0_0", "is_ignored": false, "lines": "   \\- com.fasterxml.jackson.core:jackson-databind:jar:2.9.8:compile\n      +- com.fasterxml.jackson.core:jackson-annotations:jar:2.9.0:compile", "message": "com.fasterxml.jackson.core:jackson-databind <= 2.9.10.3 is vulnerable to code execution via deserialization of untrusted data if the Apache Ignite Java Transaction API is in the classpath.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "dev.semgrep.actions": [], "owasp": ["A06:2021 - Vulnerable and Outdated Components", "A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "publish-date": "2022-07-15T19:41:47Z", "references": ["https://github.com/advisories/GHSA-rpr3-cw39-3pxh", "https://nvd.nist.gov/vuln/detail/CVE-2020-10650"], "sca-fix-versions": [{"com.fasterxml.jackson.core:jackson-databind": "2.9.10.4"}], "sca-kind": "reachable", "sca-legacy-identifier": "jackson-databind-ignite-gadget", "sca-schema": 20230302, "sca-severity": "HIGH", "sca-vuln-database-identifier": "CVE-2020-10650", "source": "https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-f94379b4-47ec-4137-a18e-dd5a0ef4ec9d&reachability+analysis=1-2-3-4", "technology": ["java"]}, "metavars": {}, "sca_info": {"dependency_match": {"dependency_pattern": {"ecosystem": "maven", "package": "com.fasterxml.jackson.core:jackson-databind", "semver_range": "<= 2.9.10.3"}, "found_dependency": {"allowed_hashes": {}, "ecosystem": "maven", "line_number": 61, "package": "com.fasterxml.jackson.core:jackson-databind", "transitivity": "transitive", "version": "2.9.8"}, "lockfile": "maven_dep_tree.txt"}, "reachability_rule": true, "reachable": false, "sca_finding_schema": 20220913}, "severity": "ERROR"}, "path": "maven_dep_tree.txt", "start": {"col": 0, "line": 61, "offset": 0}}, {"check_id": "ssc-89b8c9d4-2a3d-4940-ba53-ccfe54901e19", "end": {"col": 0, "line": 16, "offset": 0}, "extra": {"engine_kind": "OSS", "fingerprint": "ebbb343a87f7140bc034cb795c2790e294505e1d142eb40ebbaee2061851b091d2a73ab5695391e5f86bc68e750f37da59b4fb56d9f6c5e12900ded7fe8cd973_0", "is_ignored": false, "lines": "|  \\- org.yaml:snakeyaml:jar:1.23:runtime\n+- org.springframework.boot:spring-boot-starter-web:jar:2.1.2.RELEASE:compile", "message": "snakeyaml <= 1.33 is vulnerable to unsafe deserialization, which can lead to Remote Code Execution (RCE) if deserializing untrusted data using Constructor(). It is recommended to upgrade snakeyaml to 2.0 or greater and use SafeConstructor() instead of Constructor().", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "dev.semgrep.actions": [], "owasp": ["A06:2021 - Vulnerable and Outdated Components", "A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "publish-date": "2022-12-12T21:19:47Z", "references": ["https://github.com/advisories/GHSA-mjmj-j48q-9wg2", "https://nvd.nist.gov/vuln/detail/CVE-2022-1471"], "sca-fix-versions": [{"org.yaml:snakeyaml": "2.0"}], "sca-kind": "reachable", "sca-schema": 20230302, "sca-severity": "HIGH", "sca-vuln-database-identifier": "CVE-2022-1471", "source": "https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-89b8c9d4-2a3d-4940-ba53-ccfe54901e19&reachability+analysis=1-2-3-4", "technology": ["java"]}, "metavars": {}, "sca_info": {"dependency_match": {"dependency_pattern": {"ecosystem": "maven", "package": "org.yaml:snakeyaml", "semver_range": "<= 1.33"}, "found_dependency": {"allowed_hashes": {}, "ecosystem": "maven", "line_number": 15, "package": "org.yaml:snakeyaml", "transitivity": "transitive", "version": "1.23"}, "lockfile": "maven_dep_tree.txt"}, "reachability_rule": true, "reachable": false, "sca_finding_schema": 20220913}, "severity": "ERROR"}, "path": "maven_dep_tree.txt", "start": {"col": 0, "line": 15, "offset": 0}}, {"check_id": "ssc-a9413702-14a7-4904-a090-c66a7d602cc7", "end": {"col": 0, "line": 14, "offset": 0}, "extra": {"engine_kind": "OSS", "fingerprint": "db40d6791d84f8c4b98d1e169647f6e54c4e7413dff3398388e87aa32e22c6afe1f6d9a97644f72c79a255b88680cadc09283838e1f6e9517192483dd59ba13a_0", "is_ignored": false, "lines": "|  +- org.springframework:spring-core:jar:5.1.4.RELEASE:compile\n|  |  \\- org.springframework:spring-jcl:jar:5.1.4.RELEASE:compile", "message": "org.springframework:spring-core versions before 5.2.23.RELEASE, >= 5.3.0 before 5.3.26, >= 6.0.0 before 6.0.7 are vulnerable to denial-of-service (DoS) via specially crafted SpEL expression  due to Improper Neutralization Of Special Elements Used In An Expression Language Statement.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement (`Expression Language Injection`)"], "dev.semgrep.actions": [], "owasp": ["A06:2021 - Vulnerable and Outdated Components"], "publish-date": "2023-03-23T21:30:19Z", "references": ["https://github.com/advisories/GHSA-564r-hj7v-mcr5", "https://nvd.nist.gov/vuln/detail/CVE-2023-20861"], "sca-fix-versions": [{"org.springframework:spring-core": "5.2.23.RELEASE"}, {"org.springframework:spring-core": "5.3.26"}, {"org.springframework:spring-core": "6.0.7"}], "sca-kind": "reachable", "sca-schema": 20230302, "sca-severity": "HIGH", "sca-vuln-database-identifier": "CVE-2023-20861", "source": "https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-a9413702-14a7-4904-a090-c66a7d602cc7&reachability+analysis=1-2-3-4", "technology": ["java"]}, "metavars": {}, "sca_info": {"dependency_match": {"dependency_pattern": {"ecosystem": "maven", "package": "org.springframework:spring-core", "semver_range": "< 5.2.23.RELEASE"}, "found_dependency": {"allowed_hashes": {}, "ecosystem": "maven", "line_number": 13, "package": "org.springframework:spring-core", "transitivity": "transitive", "version": "5.1.4.RELEASE"}, "lockfile": "maven_dep_tree.txt"}, "reachability_rule": true, "reachable": false, "sca_finding_schema": 20220913}, "severity": "ERROR"}, "path": "maven_dep_tree.txt", "start": {"col": 0, "line": 13, "offset": 0}}, {"check_id": "ssc-ab39895e-a068-42e9-a95f-755b5402976e", "end": {"col": 0, "line": 62, "offset": 0}, "extra": {"engine_kind": "OSS", "fingerprint": "5524565c623e4f043f4a8a7a3f650a044796ac55f79665c522314c5142c97d0471037a760b898c0d10a8e1ead9b4c22c22be4e7b360e95bba3d16da0cafffcf6_0", "is_ignored": false, "lines": "   \\- com.fasterxml.jackson.core:jackson-databind:jar:2.9.8:compile\n      +- com.fasterxml.jackson.core:jackson-annotations:jar:2.9.0:compile", "message": "In FasterXML jackson-databind before 2.12.7.1 and in 2.13.x before 2.13.4.1  resource exhaustion can occur because of a lack of a check in primitive  value deserializers to avoid deep wrapper array nesting, when the  UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled.  This was patched in 2.12.7.1, 2.13.4.1, and 2.14.0.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-400: Uncontrolled Resource Consumption", "CWE-502: Deserialization of Untrusted Data"], "dev.semgrep.actions": [], "owasp": ["A06:2021 - Vulnerable and Outdated Components", "A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "publish-date": "2022-10-03T00:00:31Z", "references": ["https://github.com/advisories/GHSA-jjjh-jjxp-wpff", "https://nvd.nist.gov/vuln/detail/CVE-2022-42003"], "sca-fix-versions": [{"com.fasterxml.jackson.core:jackson-databind": "2.13.4.1"}, {"com.fasterxml.jackson.core:jackson-databind": "2.12.7.1"}], "sca-kind": "reachable", "sca-schema": 20230302, "sca-severity": "HIGH", "sca-vuln-database-identifier": "CVE-2022-42003", "source": "https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-ab39895e-a068-42e9-a95f-755b5402976e&reachability+analysis=1-2-3-4", "technology": ["java"]}, "metavars": {}, "sca_info": {"dependency_match": {"dependency_pattern": {"ecosystem": "maven", "package": "com.fasterxml.jackson.core:jackson-databind", "semver_range": ">= 2.4.0-rc1, < 2.12.7.1"}, "found_dependency": {"allowed_hashes": {}, "ecosystem": "maven", "line_number": 61, "package": "com.fasterxml.jackson.core:jackson-databind", "transitivity": "transitive", "version": "2.9.8"}, "lockfile": "maven_dep_tree.txt"}, "reachability_rule": true, "reachable": false, "sca_finding_schema": 20220913}, "severity": "ERROR"}, "path": "maven_dep_tree.txt", "start": {"col": 0, "line": 61, "offset": 0}}, {"check_id": "ssc-2d656153-6858-4870-ac0d-8b56875415e5", "end": {"col": 0, "line": 41, "offset": 0}, "extra": {"engine_kind": "OSS", "fingerprint": "0365db7800fa773f7e2cd5e4313efb7d0ee241a0e63bade635dd02ef79066edf5a30dc4183d222d58509dc06300d3e0dab8a0f6551e9cc162ba61ffb446bcace_0", "is_ignored": false, "lines": "|  |  +- net.minidev:json-smart:jar:2.3:test\n|  |  |  \\- net.minidev:accessors-smart:jar:1.2:test", "message": "net.minidev:json-smart versions before 2.4.9 are vulnerable to Uncontrolled Recursion leading to Denial of Service (DoS)  due to a StackOverflowError when parsing a deeply nested JSON array or object.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-674: Uncontrolled Recursion"], "dev.semgrep.actions": [], "owasp": ["A06:2021 - Vulnerable and Outdated Components"], "publish-date": "2023-03-23T20:32:03Z", "references": ["https://github.com/advisories/GHSA-493p-pfq6-5258", "https://nvd.nist.gov/vuln/detail/CVE-2023-1370"], "sca-fix-versions": [{"net.minidev:json-smart": "2.4.9"}], "sca-kind": "reachable", "sca-schema": 20230302, "sca-severity": "HIGH", "sca-vuln-database-identifier": "CVE-2023-1370", "source": "https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-2d656153-6858-4870-ac0d-8b56875415e5&reachability+analysis=1-2-3-4", "technology": ["java"]}, "metavars": {}, "sca_info": {"dependency_match": {"dependency_pattern": {"ecosystem": "maven", "package": "net.minidev:json-smart", "semver_range": "< 2.4.9"}, "found_dependency": {"allowed_hashes": {}, "ecosystem": "maven", "line_number": 40, "package": "net.minidev:json-smart", "transitivity": "transitive", "version": "2.3"}, "lockfile": "maven_dep_tree.txt"}, "reachability_rule": true, "reachable": false, "sca_finding_schema": 20220913}, "severity": "ERROR"}, "path": "maven_dep_tree.txt", "start": {"col": 0, "line": 40, "offset": 0}}, {"check_id": "ssc-98671baa-27d0-4aac-bf32-c8de605291a2", "end": {"col": 0, "line": 35, "offset": 0}, "extra": {"engine_kind": "OSS", "fingerprint": "1d2e1abf66dfb57537b33c4dbc91a74a77ee05f7cefe1e65d2a3855d6275b00945436e2cd3535189e81629755c825585b8d0d8fabebd27ac14a18fc7fe032535_0", "is_ignored": false, "lines": "+- org.postgresql:postgresql:jar:42.2.5:compile\n+- org.jsoup:jsoup:jar:1.8.3:compile", "message": "The PostgreSQL JDBC implementation of `refreshRow` method is vulnerable to SQL injection in versions greater or equal  than 42.3.0 and less than 42.4.1, along with versions greater than or equal to 42.2.0 and less than 42.2.26. This could lead to executing arbitrary SQL commands  in the database if it can be accessed by an unauthenticated user. ", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command (SQL Injection)"], "dev.semgrep.actions": [], "owasp": ["A06:2021 - Vulnerable and Outdated Components"], "publish-date": "2022-08-06T05:51:38Z", "references": ["https://github.com/advisories/GHSA-r38f-c4h4-hqq2", "https://nvd.nist.gov/vuln/detail/CVE-2022-31197"], "sca-fix-versions": [{"org.postgresql:postgresql": "42.3.7"}, {"org.postgresql:postgresql": "42.4.1"}, {"org.postgresql:postgresql": "42.2.26"}], "sca-kind": "reachable", "sca-legacy-identifier": "pgjdbc-refresh-sqli", "sca-schema": 20230302, "sca-severity": "HIGH", "sca-vuln-database-identifier": "CVE-2022-31197", "source": "https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-98671baa-27d0-4aac-bf32-c8de605291a2&reachability+analysis=1-2-3-4", "technology": ["java"]}, "metavars": {}, "sca_info": {"dependency_match": {"dependency_pattern": {"ecosystem": "maven", "package": "org.postgresql:postgresql", "semver_range": "< 42.2.26"}, "found_dependency": {"allowed_hashes": {}, "ecosystem": "maven", "line_number": 34, "package": "org.postgresql:postgresql", "transitivity": "direct", "version": "42.2.5"}, "lockfile": "maven_dep_tree.txt"}, "reachability_rule": true, "reachable": false, "sca_finding_schema": 20220913}, "severity": "ERROR"}, "path": "maven_dep_tree.txt", "start": {"col": 0, "line": 34, "offset": 0}}, {"check_id": "ssc-f3986175-e638-402b-a012-2b2c96084db3", "end": {"col": 0, "line": 14, "offset": 0}, "extra": {"engine_kind": "OSS", "fingerprint": "5e34227e35827a457164f6d3e668873abc7c0bac4adbaa094ad361574ff8d16a3a69a67ec8ead0d676f92d316802a186bf9e45462f1662318c26dbc29837d7b6_0", "is_ignored": false, "lines": "|  +- org.springframework:spring-core:jar:5.1.4.RELEASE:compile\n|  |  \\- org.springframework:spring-jcl:jar:5.1.4.RELEASE:compile", "message": "org.springframework:spring-core versions before 5.2.24.RELEASE, >= 5.3.0 before 5.3.27, >= 6.0.0 before 6.0.8 are vulnerable are vulnerable to denial-of-service (DoS) via specially crafted Spring Expression Language  (SpEL) expression due to Improper Neutralization Of Special Elements Used In An Expression Language Statement  ('Expression Language Injection').", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-400: Uncontrolled Resource Consumption", "CWE-770: Allocation of Resources Without Limits or Throttling", "CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')"], "dev.semgrep.actions": [], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection", "A06:2021 - Vulnerable and Outdated Components"], "publish-date": "2023-04-13T21:30:27Z", "references": ["https://github.com/advisories/GHSA-wxqc-pxw9-g2p8", "https://nvd.nist.gov/vuln/detail/CVE-2023-20863"], "sca-fix-versions": [{"org.springframework:spring-core": "5.2.24.RELEASE"}, {"org.springframework:spring-core": "5.3.27"}, {"org.springframework:spring-core": "6.0.8"}], "sca-kind": "reachable", "sca-schema": 20230302, "sca-severity": "HIGH", "sca-vuln-database-identifier": "CVE-2023-20863", "source": "https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-f3986175-e638-402b-a012-2b2c96084db3&reachability+analysis=1-2-3-4", "technology": ["java"]}, "metavars": {}, "sca_info": {"dependency_match": {"dependency_pattern": {"ecosystem": "maven", "package": "org.springframework:spring-core", "semver_range": "< 5.2.24.RELEASE"}, "found_dependency": {"allowed_hashes": {}, "ecosystem": "maven", "line_number": 13, "package": "org.springframework:spring-core", "transitivity": "transitive", "version": "5.1.4.RELEASE"}, "lockfile": "maven_dep_tree.txt"}, "reachability_rule": true, "reachable": false, "sca_finding_schema": 20220913}, "severity": "ERROR"}, "path": "maven_dep_tree.txt", "start": {"col": 0, "line": 13, "offset": 0}}, {"check_id": "ssc-55e1566e-8239-4102-8e37-c41df87f0139", "end": {"col": 0, "line": 17, "offset": 0}, "extra": {"engine_kind": "OSS", "fingerprint": "ba960991f26a1d1bd2c3bf2e55e31c0bdce02e8b53e446896be0b3d7bbeb02df49fb92c774269057bb3be06b4c95f929e9fc7556ae204a06fd6a26cd88257f65_0", "is_ignored": false, "lines": "+- org.springframework.boot:spring-boot-starter-web:jar:2.1.2.RELEASE:compile\n|  +- org.springframework.boot:spring-boot-starter-json:jar:2.1.2.RELEASE:compile", "message": "Spring Core version 5.3.17 and below is vulnerable to RCE in the following conditions:  * JRE 9+ (module support)  * Tomcat Webserver  * WAR packaging * Method contracts using a RequestMapping annotation and Plain Old Java Objects (POJO) arguments without method annotations. This rule checks for the Java-specific Spring annotations that are a precondition for this attack: you will need to verify your webserver and Spring executable packaging out-of-band.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "dev.semgrep.actions": [], "owasp": ["A03:2021 - Injection", "A06:2021 - Vulnerable and Outdated Components"], "patch-diff": "https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15", "publish-date": "2022-03-31T18:30:50Z", "references": ["https://github.com/advisories/GHSA-36p3-wjmg-h94x", "https://nvd.nist.gov/vuln/detail/CVE-2022-22965"], "sca-fix-versions": [{"org.springframework:spring-webflux": "5.2.20.RELEASE"}, {"org.springframework:spring-webmvc": "5.2.20.RELEASE"}, {"org.springframework:spring-beans": "5.2.20.RELEASE"}, {"org.springframework.boot:spring-boot-starter-webflux": "2.6.6"}, {"org.springframework.boot:spring-boot-starter-webflux": "2.5.12"}], "sca-kind": "reachable", "sca-legacy-identifier": "spring-requestmapper-rce", "sca-schema": 20230302, "sca-severity": "CRITICAL", "sca-vuln-database-identifier": "CVE-2022-22965", "source": "https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-55e1566e-8239-4102-8e37-c41df87f0139&reachability+analysis=1-2-3-4", "technology": ["java", "spring", "tomcat"]}, "metavars": {}, "sca_info": {"dependency_match": {"dependency_pattern": {"ecosystem": "maven", "package": "org.springframework.boot:spring-boot-starter-web", "semver_range": "< 2.5.12"}, "found_dependency": {"allowed_hashes": {}, "ecosystem": "maven", "line_number": 16, "package": "org.springframework.boot:spring-boot-starter-web", "transitivity": "direct", "version": "2.1.2.RELEASE"}, "lockfile": "maven_dep_tree.txt"}, "reachability_rule": true, "reachable": false, "sca_finding_schema": 20220913}, "severity": "ERROR"}, "path": "maven_dep_tree.txt", "start": {"col": 0, "line": 16, "offset": 0}}, {"check_id": "ssc-55e1566e-8239-4102-8e37-c41df87f0139", "end": {"col": 0, "line": 31, "offset": 0}, "extra": {"engine_kind": "OSS", "fingerprint": "ba960991f26a1d1bd2c3bf2e55e31c0bdce02e8b53e446896be0b3d7bbeb02df49fb92c774269057bb3be06b4c95f929e9fc7556ae204a06fd6a26cd88257f65_0", "is_ignored": false, "lines": "|  |  \\- org.springframework:spring-beans:jar:5.1.4.RELEASE:compile\n|  \\- org.springframework:spring-webmvc:jar:5.1.4.RELEASE:compile", "message": "Spring Core version 5.3.17 and below is vulnerable to RCE in the following conditions:  * JRE 9+ (module support)  * Tomcat Webserver  * WAR packaging * Method contracts using a RequestMapping annotation and Plain Old Java Objects (POJO) arguments without method annotations. This rule checks for the Java-specific Spring annotations that are a precondition for this attack: you will need to verify your webserver and Spring executable packaging out-of-band.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "dev.semgrep.actions": [], "owasp": ["A03:2021 - Injection", "A06:2021 - Vulnerable and Outdated Components"], "patch-diff": "https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15", "publish-date": "2022-03-31T18:30:50Z", "references": ["https://github.com/advisories/GHSA-36p3-wjmg-h94x", "https://nvd.nist.gov/vuln/detail/CVE-2022-22965"], "sca-fix-versions": [{"org.springframework:spring-webflux": "5.2.20.RELEASE"}, {"org.springframework:spring-webmvc": "5.2.20.RELEASE"}, {"org.springframework:spring-beans": "5.2.20.RELEASE"}, {"org.springframework.boot:spring-boot-starter-webflux": "2.6.6"}, {"org.springframework.boot:spring-boot-starter-webflux": "2.5.12"}], "sca-kind": "reachable", "sca-legacy-identifier": "spring-requestmapper-rce", "sca-schema": 20230302, "sca-severity": "CRITICAL", "sca-vuln-database-identifier": "CVE-2022-22965", "source": "https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-55e1566e-8239-4102-8e37-c41df87f0139&reachability+analysis=1-2-3-4", "technology": ["java", "spring", "tomcat"]}, "metavars": {}, "sca_info": {"dependency_match": {"dependency_pattern": {"ecosystem": "maven", "package": "org.springframework:spring-beans", "semver_range": "< 5.2.20.RELEASE"}, "found_dependency": {"allowed_hashes": {}, "ecosystem": "maven", "line_number": 30, "package": "org.springframework:spring-beans", "transitivity": "transitive", "version": "5.1.4.RELEASE"}, "lockfile": "maven_dep_tree.txt"}, "reachability_rule": true, "reachable": false, "sca_finding_schema": 20220913}, "severity": "ERROR"}, "path": "maven_dep_tree.txt", "start": {"col": 0, "line": 30, "offset": 0}}, {"check_id": "ssc-55e1566e-8239-4102-8e37-c41df87f0139", "end": {"col": 0, "line": 32, "offset": 0}, "extra": {"engine_kind": "OSS", "fingerprint": "ba960991f26a1d1bd2c3bf2e55e31c0bdce02e8b53e446896be0b3d7bbeb02df49fb92c774269057bb3be06b4c95f929e9fc7556ae204a06fd6a26cd88257f65_0", "is_ignored": false, "lines": "|  \\- org.springframework:spring-webmvc:jar:5.1.4.RELEASE:compile\n|     +- org.springframework:spring-aop:jar:5.1.4.RELEASE:compile", "message": "Spring Core version 5.3.17 and below is vulnerable to RCE in the following conditions:  * JRE 9+ (module support)  * Tomcat Webserver  * WAR packaging * Method contracts using a RequestMapping annotation and Plain Old Java Objects (POJO) arguments without method annotations. This rule checks for the Java-specific Spring annotations that are a precondition for this attack: you will need to verify your webserver and Spring executable packaging out-of-band.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "dev.semgrep.actions": [], "owasp": ["A03:2021 - Injection", "A06:2021 - Vulnerable and Outdated Components"], "patch-diff": "https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15", "publish-date": "2022-03-31T18:30:50Z", "references": ["https://github.com/advisories/GHSA-36p3-wjmg-h94x", "https://nvd.nist.gov/vuln/detail/CVE-2022-22965"], "sca-fix-versions": [{"org.springframework:spring-webflux": "5.2.20.RELEASE"}, {"org.springframework:spring-webmvc": "5.2.20.RELEASE"}, {"org.springframework:spring-beans": "5.2.20.RELEASE"}, {"org.springframework.boot:spring-boot-starter-webflux": "2.6.6"}, {"org.springframework.boot:spring-boot-starter-webflux": "2.5.12"}], "sca-kind": "reachable", "sca-legacy-identifier": "spring-requestmapper-rce", "sca-schema": 20230302, "sca-severity": "CRITICAL", "sca-vuln-database-identifier": "CVE-2022-22965", "source": "https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-55e1566e-8239-4102-8e37-c41df87f0139&reachability+analysis=1-2-3-4", "technology": ["java", "spring", "tomcat"]}, "metavars": {}, "sca_info": {"dependency_match": {"dependency_pattern": {"ecosystem": "maven", "package": "org.springframework:spring-webmvc", "semver_range": "< 5.2.20.RELEASE"}, "found_dependency": {"allowed_hashes": {}, "ecosystem": "maven", "line_number": 31, "package": "org.springframework:spring-webmvc", "transitivity": "transitive", "version": "5.1.4.RELEASE"}, "lockfile": "maven_dep_tree.txt"}, "reachability_rule": true, "reachable": false, "sca_finding_schema": 20220913}, "severity": "ERROR"}, "path": "maven_dep_tree.txt", "start": {"col": 0, "line": 31, "offset": 0}}, {"check_id": "ssc-19f84c69-4643-4a74-9e4a-6e52200e4dc3", "end": {"col": 0, "line": 4, "offset": 0}, "extra": {"engine_kind": "OSS", "fingerprint": "e5563d365b525251262bce75ea6d4328a3dca878049d2b403db09c80b502dee5c270653c2df903ba7724f91268dad0c2fce2892ed5e3176579cf48c6ee3bbd34_0", "is_ignored": false, "lines": "|  +- org.springframework.boot:spring-boot:jar:2.1.2.RELEASE:compile\n|  |  \\- org.springframework:spring-context:jar:5.1.4.RELEASE:compile", "message": "`spring-boot` versions prior to version `v2.2.11.RELEASE` was vulnerable to temporary directory hijacking. The vulnerable method is used to create a work directory for embedded web servers such as Tomcat and Jetty. The directory contains configuration files, JSP/class files, etc. If a local attacker got the permission to write in this directory, they could completely take over the application (ie. local privilege escalation).", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-377: Insecure Temporary File", "CWE-379: Creation of Temporary File in Directory with Insecure Permissions", "CWE-668: Exposure of Resource to Wrong Sphere"], "dev.semgrep.actions": [], "owasp": ["A01:2021 - Broken Access Control", "A06:2021 - Vulnerable and Outdated Components"], "publish-date": "2022-07-11T20:59:02Z", "references": ["https://github.com/advisories/GHSA-cm59-pr5q-cw85", "https://nvd.nist.gov/vuln/detail/CVE-2022-27772"], "sca-fix-versions": [{"org.springframework.boot:spring-boot": "2.2.11.RELEASE"}], "sca-kind": "upgrade-only", "sca-legacy-identifier": "spring-boot-temp-directory-hijacking", "sca-schema": 20230302, "sca-severity": "HIGH", "sca-vuln-database-identifier": "CVE-2022-27772", "source": "https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-19f84c69-4643-4a74-9e4a-6e52200e4dc3&reachability+analysis=1-2-3-4", "technology": ["java"]}, "metavars": {}, "sca_info": {"dependency_match": {"dependency_pattern": {"ecosystem": "maven", "package": "org.springframework.boot:spring-boot", "semver_range": "<= 2.2.10.RELEASE"}, "found_dependency": {"allowed_hashes": {}, "ecosystem": "maven", "line_number": 3, "package": "org.springframework.boot:spring-boot", "transitivity": "transitive", "version": "2.1.2.RELEASE"}, "lockfile": "maven_dep_tree.txt"}, "reachability_rule": false, "reachable": false, "sca_finding_schema": 20220913}, "severity": "ERROR"}, "path": "maven_dep_tree.txt", "start": {"col": 0, "line": 3, "offset": 0}}, {"check_id": "ssc-3e1b659c-65a0-46cb-9095-665e1c944dbe", "end": {"col": 0, "line": 6, "offset": 0}, "extra": {"engine_kind": "OSS", "fingerprint": "33de7c16b53c0928a3fda874abd577b5ac4cc636c2d0215d31a856f0b4049543fe8d207054b59eba69b8a2a9c6a72544ad0aea4cea3602ee29a89cc8f0a4ce61_0", "is_ignored": false, "lines": "|  +- org.springframework.boot:spring-boot-autoconfigure:jar:2.1.2.RELEASE:compile\n|  +- org.springframework.boot:spring-boot-starter-logging:jar:2.1.2.RELEASE:compile", "message": "org.springframework.boot:spring-boot-autoconfigure versions before 2.5.15, >= 2.6.0 before 2.6.15, >= 2.7.0 before 2.7.12, >= 3.0.0 before 3.0.7 are vulnerable to Uncontrolled Resource Consumption. There is potential for a denial-of-service (DoS) attack if Spring MVC is used together with a reverse proxy cache. The application is vulnerable if ALL of the following conditions are true. 1. The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath. 2. The application makes use of Spring Boots welcome page support, either static or templated. 3. The application is deployed behind a proxy which caches 404 responses.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-400: Uncontrolled Resource Consumption"], "dev.semgrep.actions": [], "owasp": ["A06:2021 - Vulnerable and Outdated Components"], "publish-date": "2023-05-26T18:30:21Z", "references": ["https://github.com/advisories/GHSA-xf96-w227-r7c4", "https://nvd.nist.gov/vuln/detail/CVE-2023-20883"], "sca-fix-versions": [{"org.springframework.boot:spring-boot-autoconfigure": "2.5.15"}, {"org.springframework.boot:spring-boot-autoconfigure": "2.6.15"}, {"org.springframework.boot:spring-boot-autoconfigure": "2.7.12"}, {"org.springframework.boot:spring-boot-autoconfigure": "3.0.7"}], "sca-kind": "upgrade-only", "sca-reachable-if": "you have a user-facing instance of spring boot and ALL of the following conditions are true. 1. The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath. 2. The application makes use of Spring Boots welcome page support, either static or templated. 3. The application is deployed behind a proxy which caches 404 responses.", "sca-schema": 20230302, "sca-severity": "HIGH", "sca-vuln-database-identifier": "CVE-2023-20883", "source": "https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-3e1b659c-65a0-46cb-9095-665e1c944dbe&reachability+analysis=1-2-3-4", "technology": ["java"]}, "metavars": {}, "sca_info": {"dependency_match": {"dependency_pattern": {"ecosystem": "maven", "package": "org.springframework.boot:spring-boot-autoconfigure", "semver_range": "< 2.5.15"}, "found_dependency": {"allowed_hashes": {}, "ecosystem": "maven", "line_number": 5, "package": "org.springframework.boot:spring-boot-autoconfigure", "transitivity": "transitive", "version": "2.1.2.RELEASE"}, "lockfile": "maven_dep_tree.txt"}, "reachability_rule": false, "reachable": false, "sca_finding_schema": 20220913}, "severity": "ERROR"}, "path": "maven_dep_tree.txt", "start": {"col": 0, "line": 5, "offset": 0}}], "version": "1.27.0"}